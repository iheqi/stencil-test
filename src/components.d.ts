/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {
  interface HTMLFirstMainElement extends HTMLStencilElement {

  }
  var HTMLFirstMainElement: {
    prototype: HTMLFirstMainElement;
    new (): HTMLFirstMainElement;
  };
  interface HTMLElementTagNameMap {
    'first-main': HTMLFirstMainElement;
  }
  interface ElementTagNameMap {
    'first-main': HTMLFirstMainElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'first-main': JSXElements.FirstMainAttributes;
    }
  }
  namespace JSXElements {
    export interface FirstMainAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLIntroBlockElement extends HTMLStencilElement {
    'text': string;
    'title': string;
  }
  var HTMLIntroBlockElement: {
    prototype: HTMLIntroBlockElement;
    new (): HTMLIntroBlockElement;
  };
  interface HTMLElementTagNameMap {
    'intro-block': HTMLIntroBlockElement;
  }
  interface ElementTagNameMap {
    'intro-block': HTMLIntroBlockElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'intro-block': JSXElements.IntroBlockAttributes;
    }
  }
  namespace JSXElements {
    export interface IntroBlockAttributes extends HTMLAttributes {
      'text'?: string;
      'title'?: string;
    }
  }
}


declare global {
  interface HTMLMockInputElement extends HTMLStencilElement {

  }
  var HTMLMockInputElement: {
    prototype: HTMLMockInputElement;
    new (): HTMLMockInputElement;
  };
  interface HTMLElementTagNameMap {
    'mock-input': HTMLMockInputElement;
  }
  interface ElementTagNameMap {
    'mock-input': HTMLMockInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mock-input': JSXElements.MockInputAttributes;
    }
  }
  namespace JSXElements {
    export interface MockInputAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSecondMainElement extends HTMLStencilElement {

  }
  var HTMLSecondMainElement: {
    prototype: HTMLSecondMainElement;
    new (): HTMLSecondMainElement;
  };
  interface HTMLElementTagNameMap {
    'second-main': HTMLSecondMainElement;
  }
  interface ElementTagNameMap {
    'second-main': HTMLSecondMainElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'second-main': JSXElements.SecondMainAttributes;
    }
  }
  namespace JSXElements {
    export interface SecondMainAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSiteFooterElement extends HTMLStencilElement {

  }
  var HTMLSiteFooterElement: {
    prototype: HTMLSiteFooterElement;
    new (): HTMLSiteFooterElement;
  };
  interface HTMLElementTagNameMap {
    'site-footer': HTMLSiteFooterElement;
  }
  interface ElementTagNameMap {
    'site-footer': HTMLSiteFooterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-footer': JSXElements.SiteFooterAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteFooterAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSiteHeaderElement extends HTMLStencilElement {

  }
  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
